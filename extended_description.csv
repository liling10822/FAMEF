,URL,contributor,excerpt
0,https://github.com/GoogleChrome/puppeteer,Allen Mao,"Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium."
1,https://github.com/JimmySuen/integral-human-pose,Allen Mao,"The major contributors of this repository include Xiao Sun, Chuankang Li, Bin Xiao, Fangyin Wei, Yichen Wei."
2,https://github.com/JimmySuen/integral-human-pose,Allen Mao,Integral Regression is initially described in an ECCV 2018 paper. (Slides).
3,https://github.com/JimmySuen/integral-human-pose,Allen Mao,"We build a 3D pose estimation system based mainly on the Integral Regression, placing second in the ECCV2018 3D Human Pose Estimation Challenge. Note that, the winner Sarandi et al. also uses the Integral Regression (or soft-argmax) with a better augmented 3D dataset in their method indicating the Integral Regression is the currently state-of-the-art 3D human pose estimation method."
4,https://github.com/JimmySuen/integral-human-pose,Allen Mao,The Integral Regression is also known as soft-argmax. Please refer to two contemporary works (Luvizon et al. and Nibali et al.) for a better comparision and more comprehensive understanding.
5,https://github.com/JimmySuen/integral-human-pose,Allen Mao,This is an official implementation for Integral Human Pose Regression based on Pytorch. It is worth noticing that:
6,https://github.com/JimmySuen/integral-human-pose,Allen Mao,The original implementation is based on our internal Mxnet version. There are slight differences in the final accuracy and running time due to the plenty details in platform switch.
7,https://github.com/JuliaGeo/LibGEOS.jl,Allen Mao,"LibGEOS is a LGPL-licensed package for manipulation and analysis of planar geometric objects, based on the libraries GEOS (the engine of PostGIS) and JTS (from which GEOS is ported)."
8,https://github.com/JuliaGeo/LibGEOS.jl,Allen Mao,"Among other things, it allows you to parse Well-known Text (WKT)"
9,https://github.com/LMescheder/GAN_stability,Allen Mao,This repository contains the experiments in the supplementary material for the paper Which Training Methods for GANs do actually Converge?.
10,https://github.com/LMescheder/GAN_stability,Allen Mao,"For the results presented in the paper, we did not use a moving average over the weights. However, using a moving average helps to reduce noise and we therefore recommend its usage. Indeed, we found that using a moving average leads to much better inception scores on Imagenet."
11,https://github.com/LMescheder/GAN_stability,Allen Mao,"Batch normalization is currently not supported when using an exponential running average, as the running average is only computed over the parameters of the models and not the other buffers of the model."
12,https://github.com/NSGeophysics/GPRPy,Allen Mao,Open-source Ground Penetrating Radar processing and visualization software.
13,https://github.com/NVIDIA/vid2vid,Allen Mao,"Pytorch implementation for high-resolution (e.g., 2048x1024) photorealistic video-to-video translation. It can be used for turning semantic label maps into photo-realistic videos, synthesizing people talking from edge maps, or generating human motions from poses. The core of video-to-video translation is image-to-image translation. Some of our work in that space can be found in pix2pixHD and SPADE. "
14,https://github.com/OpenGeoVis/PVGeo,Allen Mao,The PVGeo Python package contains VTK powered tools for data visualization in geophysics which are wrapped for direct use within the application ParaView by Kitware or in a Python environment with PyVista. These tools are tailored to data visualization in the geosciences with a heavy focus on structured data sets like 2D or 3D time-varying grids.
15,https://github.com/OpenGeoVis/omfvista,Allen Mao,A PyVista (and VTK) interface for the Open Mining Format package (omf) providing Python 3D visualization and useable mesh data structures for processing datasets in the OMF specification.
16,https://github.com/OpenGeoscience/geonotebook/,Allen Mao,"GeoNotebook is an application that provides client/server environment with interactive visualization and analysis capabilities using Jupyter, GeoJS and other open source tools. Jointly developed by Kitware and NASA Ames."
17,https://github.com/Toblerity/Fiona/,Allen Mao,Fiona is OGR's neat and nimble API for Python programmers.
18,https://github.com/Toblerity/Fiona/,Allen Mao,"Fiona is designed to be simple and dependable. It focuses on reading and writing data in standard Python IO style and relies upon familiar Python types and protocols such as files, dictionaries, mappings, and iterators instead of classes specific to OGR. Fiona can read and write real-world data using multi-layered GIS formats and zipped virtual file systems and integrates readily with other Python GIS packages such as pyproj, Rtree, and Shapely. Fiona is supported only on CPython versions 2.7 and 3.4+."
19,https://github.com/Toblerity/Shapely,Allen Mao,"Shapely is a BSD-licensed Python package for manipulation and analysis of planar geometric objects. It is based on the widely deployed GEOS (the engine of PostGIS) and JTS (from which GEOS is ported) libraries. Shapely is not concerned with data formats or coordinate systems, but can be readily integrated with packages that are."
20,https://github.com/XiaLiPKU/RESCAN,Allen Mao,"Rain streaks can severely degrade the visibility, which causes many current computer vision algorithms fail to work. So it is necessary to remove the rain from images. We propose a novel deep network architecture based on deep convolutional and recurrent neural networks for single image deraining. As contextual information is very important for rain removal, we first adopt the dilated convolutional neural network to acquire large receptive field. To better fit the rain removal task, we also modify the network. In heavy rain, rain streaks have various directions and shapes, which can be regarded as the accumulation of multiple rain streak layers. We assign different alpha-values to various rain streak layers according to the intensity and transparency by incorporating the squeeze-and-excitation block. Since rain streak layers overlap with each other, it is not easy to remove the rain in one stage. So we further decompose the rain removal into multiple stages. Recurrent neural network is incorporated to preserve the useful information in previous stages and benefit the rain removal in later stages. We conduct extensive experiments on both synthetic and real-world datasets. Our proposed method outperforms the state-of-the-art approaches under all evaluation metrics."
21,https://github.com/ZhouYanzhao/PRM,Allen Mao,The pytorch branch contains:
22,https://github.com/ZhouYanzhao/PRM,Allen Mao,the pytorch implementation of Peak Response Mapping (Stimulation and Backprop).
23,https://github.com/ZhouYanzhao/PRM,Allen Mao,"the PASCAL-VOC demo (training, inference, and visualization)."
24,https://github.com/agile-geoscience/striplog/,Allen Mao,Lithology and stratigraphic logs for wells and outcrop.
25,https://github.com/akaszynski/pyansys,Allen Mao,This Python module allows you to:
26,https://github.com/akaszynski/pyansys,Allen Mao,"Interactively control an instance of ANSYS v14.5 + using Python on Linux, >=17.0 on Windows."
27,https://github.com/akaszynski/pyansys,Allen Mao,Extract data directly from binary ANSYS v14.5+ files and to display or animate them.
28,https://github.com/akaszynski/pyansys,Allen Mao,"Rapidly read in binary result (.rst), binary mass and stiffness (.full), and ASCII block archive (.cdb) files."
29,https://github.com/albertpumarola/GANimation,Allen Mao,"Official implementation of GANimation. In this work we introduce a novel GAN conditioning scheme based on Action Units (AU) annotations, which describe in a continuous manifold the anatomical facial movements defining a human expression. Our approach permits controlling the magnitude of activation of each AU and combine several of them. For more information please refer to the paper."
30,https://github.com/albertpumarola/GANimation,Allen Mao,This code was made public to share our research for the benefit of the scientific community. Do NOT use it for immoral purposes.
31,https://github.com/cgre-aachen/gempy,Allen Mao,What is it
32,https://github.com/cgre-aachen/gempy,Allen Mao,"GemPy is a Python-based, open-source library for implicitly generating 3D structural geological models. It is capable of constructing complex 3D geological models of folded structures, fault networks and unconformities. It was designed from the ground up to support easy embedding in probabilistic frameworks for the uncertainty analysis of subsurface structures."
33,https://github.com/cgre-aachen/gempy,Allen Mao,Features
34,https://github.com/cgre-aachen/gempy,Allen Mao,The core algorithm of GemPy is based on a universal cokriging interpolation method devised by Lajaunie et al. (1997) and extended by Calcagno et al. (2008). Its implicit nature allows the user to automatically generate complex 3D structural geological models through the interpolation of input data:
35,https://github.com/cgre-aachen/gempy,Allen Mao,"Surface contact points: 3D coordinates of points marking the boundaries between different features (e.g. layer interfaces, fault planes, unconformities)."
36,https://github.com/cgre-aachen/gempy,Allen Mao,Orientation measurements: Orientation of the poles perpendicular to the dipping of surfaces at any point in the 3D space.
37,https://github.com/cgre-aachen/gempy,Allen Mao,GemPy also allows for the definition of topological elements such as combining multiple stratigraphic sequences and complex fault networks to be considered in the modeling process.
38,https://github.com/cgre-aachen/gempy,Allen Mao,"GemPy itself offers direct visualization of 2D model sections via matplotlib and in full, interactive 3D using the Visualization Toolkit (VTK). The VTK support also allow to the real time maniulation of the 3-D model, allowing for the exact modification of data. Models can also easily be exportes in VTK file format for further visualization and processing in other software such as ParaView."
39,https://github.com/cgre-aachen/gempy,Allen Mao,"GemPy was designed from the beginning to support stochastic geological modeling for uncertainty analysis (e.g. Monte Carlo simulations, Bayesian inference). This was achieved by writing GemPy's core architecture using the numerical computation library Theano to couple it with the probabilistic programming framework PyMC3. This enables the use of advanced sampling methods (e.g. Hamiltonian Monte Carlo) and is of particular relevance when considering uncertainties in the model input data and making use of additional secondary information in a Bayesian inference framework."
40,https://github.com/cgre-aachen/gempy,Allen Mao,"We can, for example, include uncertainties with respect to the z-position of layer boundaries in the model space. Simple Monte Carlo simulation via PyMC will then result in different model realizations:"
41,https://github.com/cgre-aachen/gempy,Allen Mao,"Theano allows the automated computation of gradients opening the door to the use of advanced gradient-based sampling methods coupling GeMpy and PyMC3 for advanced stochastic modeling. Also, the use of Theano allows making use of GPUs through cuda (see the Theano documentation for more information."
42,https://github.com/cgre-aachen/gempy,Allen Mao,Making use of vtk interactivity and Qgrid (https://github.com/quantopian/qgrid) GemPy provides a functional interface to interact with input data and models.
43,https://github.com/cgre-aachen/gempy,Allen Mao,Sandbox
44,https://github.com/cgre-aachen/gempy,Allen Mao,"New developments in the field of augmented reality, i.e. the superimposition of real and digital objects, offer interesting and diverse possibilities that have hardly been exploited to date. The aim of the project is therefore the development and realization of an augmented reality sandbox for interaction with geoscientific data and models. In this project, methods are to be developed to project geoscientific data (such as the outcrop of a geological layer surface or geophysical measurement data) onto real surfaces."
45,https://github.com/cgre-aachen/gempy,Allen Mao,"The AR Sandbox is based on a container filled with sand, the surface of which can be shaped as required. The topography of the sand surface is continuously scanned by a 3D sensor and a camera. In the computer the scanned surface is now blended with a digital geological 3D model (or other data) in real time and an image is calculated, which is projected onto the sand surface by means of a beamer. This results in an interactive model with which the user can interact in an intuitive way and which visualizes and comprehend complex three-dimensional facts in an accessible way."
46,https://github.com/cgre-aachen/gempy,Allen Mao,"In addition to applications in teaching and research, this development offers great potential as an interactive exhibit with high outreach for the geosciences thanks to its intuitive operation. The finished sandbox can be used in numerous lectures and public events , but is mainly used as an interface to GemPy software and for rapid prototyping of implicit geological models."
47,https://github.com/cgre-aachen/gempy,Allen Mao,Remote Geomod: From GoogleEarth to 3-D Geology
48,https://github.com/cgre-aachen/gempy,Allen Mao,"We support this effort here with a full 3-D geomodeling exercise on the basis of the excellent possibilities offered by open global data sets, implemented in GoogleEarth, and dedicated geoscientific open-source software and motivate the use of 3-D geomodeling to address specific geological questions. Initial steps include the selection of relevant geological surfaces in GoogleEarth and the analysis of determined orientation values for a selected region This information is subsequently used to construct a full 3-D geological model with a state-of-the-art interpolation algorithm. Fi- nally, the generated model is intersected with a digital elevation model to obtain a geological map, which can then be reimported into GoogleEarth."
49,https://github.com/cgre-aachen/gempy,Allen Mao,New in GemPy 2.0: Docker image
50,https://github.com/cgre-aachen/gempy,Allen Mao,Finally e also provide precompiled Docker images hosted on Docker Hub with all necessary dependencies to get GemPy up and running (except vtk).
51,https://github.com/cgre-aachen/gempy,Allen Mao,"ocker is an operating-system-level-visualization software, meaning that we can package a tiny operating system with pre-installed software into a Docker image. This Docker image can then be shared with and run by others, enabling them to use intricate dependencies with just a few commands. For this to work the user needs to have a working Docker installation."
52,https://github.com/d3/d3,Allen Mao,"D3 (or D3.js) is a JavaScript library for visualizing data using web standards. D3 helps you bring data to life using SVG, Canvas and HTML. D3 combines powerful visualization and interaction techniques with a data-driven approach to DOM manipulation, giving you the full capabilities of modern browsers and the freedom to design the right visual interface for your data."
53,https://github.com/driftingtides/hyvr,Allen Mao,Introduction
54,https://github.com/driftingtides/hyvr,Allen Mao,HyVR: Turning your geofantasy into reality!
55,https://github.com/driftingtides/hyvr,Allen Mao,"The Hydrogeological Virtual Reality simulation package (HyVR) is a Python module that helps researchers and practitioners generate subsurface models with multiple scales of heterogeneity that are based on geological concepts. The simulation outputs can then be used to explore groundwater flow and solute transport behaviour. This is facilitated by HyVR outputs in common flow simulation packages' input formats. As each site is unique, HyVR has been designed that users can take the code and extend it to suit their particular simulation needs."
56,https://github.com/driftingtides/hyvr,Allen Mao,"The original motivation for HyVR was the lack of tools for modelling sedimentary deposits that include bedding structure model outputs (i.e., dip and azimuth). Such bedding parameters were required to approximate full hydraulic-conductivity tensors for groundwater flow modelling. HyVR is able to simulate these bedding parameters and generate spatially distributed parameter fields, including full hydraulic-conductivity tensors. More information about HyVR is available in the online technical documentation."
57,https://github.com/driftingtides/hyvr,Allen Mao,I hope you enjoy using HyVR much more than I enjoyed putting it together! I look forward to seeing what kind of funky fields you created in the course of your work.
58,https://github.com/driving-behavior/DBNet,Allen Mao,"This work is based on our research paper, which appears in CVPR 2018. We propose a large-scale dataset for driving behavior learning, namely, DBNet. You can also check our dataset webpage for a deeper introduction."
59,https://github.com/driving-behavior/DBNet,Allen Mao,"In this repository, we release demo code and partial prepared data for training with only images, as well as leveraging feature maps or point clouds. The prepared data are accessible here. (More demo models and scripts are released soon!)"
60,https://github.com/driving-behavior/DBNet,Allen Mao,"This baseline is run on dbnet-2018 challenge data and only nvidia_pn is tested. To measure difficult architectures comprehensively, several metrics are set, including accuracy under different thresholds, area under curve (AUC), max error (ME), mean error (AE) and mean of max errors (AME)."
61,https://github.com/driving-behavior/DBNet,Allen Mao,The implementations of these metrics could be found in evaluate.py.
62,https://github.com/empymod/empymod,Allen Mao,"The electromagnetic modeller empymod can model electric or magnetic responses due to a three-dimensional electric or magnetic source in a layered-earth model with vertical transverse isotropic (VTI) resistivity, VTI electric permittivity, and VTI magnetic permeability, from very low frequencies (DC) to very high frequencies (GPR). The calculation is carried out in the wavenumber-frequency domain, and various Hankel- and Fourier-transform methods are included to transform the responses into the space-frequency and space-time domains."
63,https://github.com/empymod/empymod,Allen Mao,"Calculates the complete (diffusion and wave phenomena) 3D electromagnetic field in a layered-earth model including vertical transverse isotropic (VTI) resistivity, VTI electric permittivity, and VTI magnetic permeability, for electric and magnetic sources as well as electric and magnetic receivers."
64,https://github.com/empymod/empymod,Allen Mao,Modelling routines:
65,https://github.com/empymod/empymod,Allen Mao,"bipole: arbitrary oriented, finite length bipoles with given source strength; space-frequency and space-time domains."
66,https://github.com/empymod/empymod,Allen Mao,"dipole: infinitesimal small dipoles oriented along the principal axes, normalized field; space-frequency and space-time domains."
67,https://github.com/empymod/empymod,Allen Mao,"wavenumber: as dipole, but returns the wavenumber-frequency domain response."
68,https://github.com/empymod/empymod,Allen Mao,"gpr: calculates the ground-penetrating radar response for given central frequency, using a Ricker wavelet (experimental)."
69,https://github.com/empymod/empymod,Allen Mao,"analytical: interface to the analytical, space-frequency and space-time domain solutions."
70,https://github.com/empymod/empymod,Allen Mao,Hankel transforms (wavenumber-frequency to space-frequency transform):
71,https://github.com/empymod/empymod,Allen Mao,Digital Linear Filters DLF (using included filters or providing own ones)
72,https://github.com/empymod/empymod,Allen Mao,Quadrature with extrapolation QWE
73,https://github.com/empymod/empymod,Allen Mao,Adaptive quadrature QUAD
74,https://github.com/empymod/empymod,Allen Mao,Fourier transforms (space-frequency to space-time transform): - Digital Linear Filters DLF (using included filters or providing own ones) - Quadrature with extrapolation QWE - Logarithmic Fast Fourier Transform FFTLog - Fast Fourier Transform FFT
75,https://github.com/empymod/empymod,Allen Mao,"Analytical, space-frequency and space-time domain solutions:"
76,https://github.com/empymod/empymod,Allen Mao,Complete full-space (electric and magnetic sources and receivers); space-frequency domain
77,https://github.com/empymod/empymod,Allen Mao,Diffusive half-space (electric sources and receivers); space-frequency and space-time domains:
78,https://github.com/empymod/empymod,Allen Mao,Direct wave (= diffusive full-space solution)
79,https://github.com/empymod/empymod,Allen Mao,Reflected wave
80,https://github.com/empymod/empymod,Allen Mao,Airwave (semi-analytical in the case of step responses)
81,https://github.com/empymod/empymod,Allen Mao,Add-ons (empymod.scripts):
82,https://github.com/empymod/empymod,Allen Mao,"The add-ons for empymod provide some very specific, additional functionalities:"
83,https://github.com/empymod/empymod,Allen Mao,"tmtemod: Return up- and down-going TM/TE-mode contributions for x-directed electric sources and receivers, which are located in the same layer."
84,https://github.com/empymod/empymod,Allen Mao,fdesign: Design digital linear filters for the Hankel and Fourier transforms.
85,https://github.com/empymod/empymod,Allen Mao,"printinfo: Can be used to show date, time, and package version information at the end of a notebook or a script."
86,https://github.com/equinor/pylops,Allen Mao,"Linear operators and inverse problems are at the core of many of the most used algorithms in signal processing, image processing, and remote sensing. When dealing with small-scale problems, the Python numerical scientific libraries numpy and scipy allow to perform many of the underlying matrix operations (e.g., computation of matrix-vector products and manipulation of matrices) in a simple and compact way."
87,https://github.com/equinor/pylops,Allen Mao,"Many useful operators, however, do not lend themselves to an explicit matrix representation when used to solve large-scale problems. PyLops operators, on the other hand, still represent a matrix and can be treated in a similar way, but do not rely on the explicit creation of a dense (or sparse) matrix itself. Conversely, the forward and adjoint operators are represented by small pieces of codes that mimic the effect of the matrix on a vector or another matrix."
88,https://github.com/equinor/pylops,Allen Mao,"Luckily, many iterative methods (e.g. cg, lsqr) do not need to know the individual entries of a matrix to solve a linear system. Such solvers only require the computation of forward and adjoint matrix-vector products as done for any of the PyLops operators."
89,https://github.com/equinor/segyio,Allen Mao,"Segyio is a small LGPL licensed C library for easy interaction with SEG-Y and Seismic Unix formatted seismic data, with language bindings for Python and Matlab. Segyio is an attempt to create an easy-to-use, embeddable, community-oriented library for seismic applications. Features are added as they are needed; suggestions and contributions of all kinds are very welcome."
90,https://github.com/equinor/segyio,Allen Mao,Project goals
91,https://github.com/equinor/segyio,Allen Mao,"Segyio does not necessarily attempt to be the end-all of SEG-Y interactions; rather, we aim to lower the barrier to interacting with SEG-Y files for embedding, new applications or free-standing programs."
92,https://github.com/equinor/segyio,Allen Mao,"Additionally, the aim is not to support the full standard or all exotic (but standard compliant) formatted files out there. Some assumptions are made, such as:"
93,https://github.com/equinor/segyio,Allen Mao,All traces in a file are assumed to be of the same size
94,https://github.com/equinor/segyio,Allen Mao,"Currently, segyio supports:"
95,https://github.com/equinor/segyio,Allen Mao,"Post-stack 3D volumes, sorted with respect to two header words (generally INLINE and CROSSLINE)"
96,https://github.com/equinor/segyio,Allen Mao,"Pre-stack 4D volumes, sorted with respect to three header words (generally INLINE, CROSSLINE, and OFFSET)"
97,https://github.com/equinor/segyio,Allen Mao,"Unstructured data, i.e. a collection of traces"
98,https://github.com/equinor/segyio,Allen Mao,"Most numerical formats (including IEEE 4- and 8-byte float, IBM float, 2- and 4-byte integers)"
99,https://github.com/equinor/segyio,Allen Mao,"The writing functionality in segyio is largely meant to modify or adapt files. A file created from scratch is not necessarily a to-spec SEG-Y file, as we only necessarily write the header fields segyio needs to make sense of the geometry. It is still highly recommended that SEG-Y files are maintained and written according to specification, but segyio does not enforce this."
100,https://github.com/equinor/segyio,Allen Mao,SEG-Y Revisions
101,https://github.com/equinor/segyio,Allen Mao,"Segyio can handle a lot of files that are SEG-Y-like, i.e. segyio handles files that don't strictly conform to the SEG-Y standard. Segyio also does not discriminate between the revisions, but instead tries to use information available in the file. For an actual standard's reference, please see the publications by SEG:"
102,https://github.com/facebook/react,Allen Mao,React is a JavaScript library for building user interfaces.
103,https://github.com/facebook/react,Allen Mao,"Declarative: React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug."
104,https://github.com/facebook/react,Allen Mao,"Component-Based: Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM."
105,https://github.com/facebook/react,Allen Mao,"Learn Once, Write Anywhere: We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using React Native."
106,https://github.com/facebookresearch/Detectron/,Allen Mao,"Detectron is Facebook AI Research's software system that implements state-of-the-art object detection algorithms, including Mask R-CNN. It is written in Python and powered by the Caffe2 deep learning framework."
107,https://github.com/facebookresearch/Detectron/,Allen Mao,"At FAIR, Detectron has enabled numerous research projects, including: Feature Pyramid Networks for Object Detection, Mask R-CNN, Detecting and Recognizing Human-Object Interactions, Focal Loss for Dense Object Detection, Non-local Neural Networks, Learning to Segment Every Thing, Data Distillation: Towards Omni-Supervised Learning, DensePose: Dense Human Pose Estimation In The Wild, and Group Normalization."
108,https://github.com/facebookresearch/Detectron/,Allen Mao,"The goal of Detectron is to provide a high-quality, high-performance codebase for object detection research. It is designed to be flexible in order to support rapid implementation and evaluation of novel research. Detectron includes implementations of the following object detection algorithms:"
109,https://github.com/facebookresearch/Detectron/,Allen Mao,Mask R-CNN
110,https://github.com/facebookresearch/Detectron/,Allen Mao,RetinaNet
111,https://github.com/facebookresearch/Detectron/,Allen Mao,Faster R-CNN
112,https://github.com/facebookresearch/Detectron/,Allen Mao,RPN
113,https://github.com/facebookresearch/Detectron/,Allen Mao,Fast R-CNN
114,https://github.com/facebookresearch/Detectron/,Allen Mao,R-FCN
115,https://github.com/facebookresearch/Detectron/,Allen Mao,using the following backbone network architectures:
116,https://github.com/facebookresearch/Detectron/,Allen Mao,"ResNeXt{50,101,152}"
117,https://github.com/facebookresearch/Detectron/,Allen Mao,"ResNet{50,101,152}"
118,https://github.com/facebookresearch/Detectron/,Allen Mao,Feature Pyramid Networks (with ResNet/ResNeXt)
119,https://github.com/facebookresearch/Detectron/,Allen Mao,VGG16
120,https://github.com/facebookresearch/Detectron/,Allen Mao,"Additional backbone architectures may be easily implemented. For more details about these models, please see References below."
121,https://github.com/foolwood/DaSiamRPN,Allen Mao,This repository includes PyTorch code for reproducing the results on VOT2018.
122,https://github.com/foolwood/DaSiamRPN,Allen Mao,"SiamRPN formulates the task of visual tracking as a task of localization and identification simultaneously, initially described in an CVPR2018 spotlight paper. (Slides at CVPR 2018 Spotlight)"
123,https://github.com/foolwood/DaSiamRPN,Allen Mao,"DaSiamRPN improves the performances of SiamRPN by (1) introducing an effective sampling strategy to control the imbalanced sample distribution, (2) designing a novel distractor-aware module to perform incremental learning, (3) making a long-term tracking extension. ECCV2018. (Slides at VOT-18 Real-time challenge winners talk)"
124,https://github.com/geo-data/gdal-docker,Allen Mao,This is an Ubuntu derived image containing the Geospatial Data Abstraction Library (GDAL) compiled with a broad range of drivers. The build process is based on that defined in the GDAL TravisCI tests.
125,https://github.com/geo-data/gdal-docker,Allen Mao,Each branch in the git repository corresponds to a supported GDAL version (e.g. 1.11.2) with the master branch following GDAL master. These branch names are reflected in the image tags on the Docker Index (e.g. branch 1.11.2 corresponds to the image geodata/gdal:1.11.2).
126,https://github.com/geopandas/geopandas/,Allen Mao,Python tools for geographic data
127,https://github.com/geopandas/geopandas/,Allen Mao,GeoPandas is a project to add support for geographic data to pandas objects. It currently implements GeoSeries and GeoDataFrame types which are subclasses of pandas.Series and pandas.DataFrame respectively. GeoPandas objects can act on shapely geometry objects and perform geometric operations.
128,https://github.com/geopandas/geopandas/,Allen Mao,"GeoPandas geometry operations are cartesian. The coordinate reference system (crs) can be stored as an attribute on an object, and is automatically set when loading from a file. Objects may be transformed to new coordinate systems with the to_crs() method. There is currently no enforcement of like coordinates for operations, but that may change in the future."
129,https://github.com/google/sg2im/,Allen Mao,This is the code for the paper
130,https://github.com/google/sg2im/,Allen Mao,Please note that this is not an officially supported Google product.
131,https://github.com/google/sg2im/,Allen Mao,A scene graph is a structured representation of a visual scene where nodes represent objects in the scene and edges represent relationships between objects. In this paper we present and end-to-end neural network model that inputs a scene graph and outputs an image.
132,https://github.com/google/sg2im/,Allen Mao,Below we show some example scene graphs along with images generated from those scene graphs using our model. By modifying the input scene graph we can exercise fine-grained control over the objects in the generated image.
133,https://github.com/google/sg2im/,Allen Mao,Model
134,https://github.com/google/sg2im/,Allen Mao,"The input scene graph is processed with a graph convolution network which passes information along edges to compute embedding vectors for all objects. These vectors are used to predict bounding boxes and segmentation masks for all objects, which are combined to form a coarse scene layout. The layout is passed to a cascaded refinement network (Chen an Koltun, ICCV 2017) which generates an output image at increasing spatial scales. The model is trained adversarially against a pair of discriminator networks which ensure that output images look realistic."
135,https://github.com/gprMax/gprMax,Allen Mao,gprMax is open source software that simulates electromagnetic wave propagation. It solves Maxwell's equations in 3D using the Finite-Difference Time-Domain (FDTD) method. gprMax was designed for modelling Ground Penetrating Radar (GPR) but can also be used to model electromagnetic wave propagation for many other applications.
136,https://github.com/gprMax/gprMax,Allen Mao,"gprMax is principally written in Python 3 with performance-critical parts written in Cython. It includes a CPU-based solver parallelised using OpenMP, and a GPU-based solver written using the NVIDIA CUDA programming model."
137,https://github.com/haoliangyu/node-qa-masker,Allen Mao,"This is a NodeJS port of pymasker. It provides a convenient way to produce masks from the Quality Assessment band of Landsat 8 OLI images, as well as MODIS land products."
138,https://github.com/hezhangsprinter/DCPDN,Allen Mao,"We propose a new end-to-end single image dehazing method, called Densely Connected Pyramid Dehazing Network (DCPDN), which can jointly learn the transmission map, atmospheric light and dehazing all together. The end-to-end learning is achieved by directly embedding the atmospheric scattering model into the network, thereby ensuring that the proposed method strictly follows the physics-driven scattering model for dehazing. Inspired by the dense network that can maximize the information flow along features from different levels, we propose a new edge-preserving densely connected encoder-decoder structure with multi-level pyramid pooling module for estimating the transmission map. This network is optimized using a newly introduced edge-preserving loss function. To further incorporate the mutual structural information between the estimated transmission map and the dehazed result, we propose a joint-discriminator based on generative adversarial network framework to decide whether the corresponding dehazed image and the estimated transmission map are real or fake. An ablation study is conducted to demonstrate the effectiveness of each module evaluated at both estimated transmission map and dehazed result. Extensive experiments demonstrate that the proposed method achieves significant improvements over the state-of-the-art methods."
139,https://github.com/hezhangsprinter/DID-MDN,Allen Mao,"We present a novel density-aware multi-stream densely connected convolutional neural network-based algorithm, called DID-MDN, for joint rain density estimation and de-raining. The proposed method enables the network itself to automatically determine the rain-density information and then efficiently remove the corresponding rain-streaks guided by the estimated rain-density label. To better characterize rain-streaks with dif- ferent scales and shapes, a multi-stream densely connected de-raining network is proposed which efficiently leverages features from different scales. Furthermore, a new dataset containing images with rain-density labels is created and used to train the proposed density-aware network."
140,https://github.com/hezhangsprinter/DID-MDN,Allen Mao,"To reproduce the quantitative results shown in the paper, please save both generated and target using python demo.py into the .png format and then test using offline tool such as the PNSR and SSIM measurement in Python or Matlab. In addition, please use netG.train() for testing since the batch for training is 1."
141,https://github.com/hiroharu-kato/neural_renderer,Allen Mao,"This is code for the paper Neural 3D Mesh Renderer by Hiroharu Kato, Yoshitaka Ushiku, and Tatsuya Harada."
142,https://github.com/hiroharu-kato/neural_renderer,Allen Mao,"For more details, please visit project page."
143,https://github.com/hiroharu-kato/neural_renderer,Allen Mao,This repository only contains the core component and simple examples. Related repositories are:
144,https://github.com/hiroharu-kato/neural_renderer,Allen Mao,Neural Renderer (this repository)
145,https://github.com/hiroharu-kato/neural_renderer,Allen Mao,Single-image 3D mesh reconstruction
146,https://github.com/hiroharu-kato/neural_renderer,Allen Mao,2D-to-3D style transfer
147,https://github.com/hiroharu-kato/neural_renderer,Allen Mao,3D DeepDream
148,https://github.com/hiroharu-kato/neural_renderer,Allen Mao,For PyTorch users
149,https://github.com/hiroharu-kato/neural_renderer,Allen Mao,"This code is written in Chainer. For PyTorch users, there are two options."
150,https://github.com/hiroharu-kato/neural_renderer,Allen Mao,"Angjoo Kanazawa & Shubham Tulsiani provides PyTorch wrapper of our renderer used in their work ""Learning Category-Specific Mesh Reconstruction from Image Collections"" (ECCV 2018)."
151,https://github.com/hiroharu-kato/neural_renderer,Allen Mao,"Nikos Kolotouros provides PyTorch re-implementation of our renderer, which does not require installation of Chainer / CuPy."
152,https://github.com/iannesbitt/readgssi,Allen Mao,"readgssi is a tool intended for use as an open-source reader and preprocessing module for subsurface data collected with Geophysical Survey Systems Incorporated (GSSI) ground-penetrating georadar (GPR) devices. It has the capability to read DZT and DZG files with the same pre-extension name and plot the data contained in those files. readgssi is also currently able to translate most DZT files to CSV and will be able to translate to other output formats including HDF5 (see future). Matlab code donated by Gabe Lewis, Dartmouth College Department of Earth Sciences. Python adaptation written with permission by Ian Nesbitt, University of Maine School of Earth and Climate Sciences."
153,https://github.com/iannesbitt/readgssi,Allen Mao,"The file read parameters are based on GSSI's DZT file description, similar to the ones available on pages 55-57 of the SIR-3000 manual. File structure is, unfortunately, prone to change at any time, and although I've been able to test with files from several systems, I have not encountered every iteration of file header yet. If you run into trouble, please create a github issue."
154,https://github.com/imfunniee/gitfolio,Allen Mao,personal website + blog for every github user
155,https://github.com/imfunniee/gitfolio,Allen Mao,Gitfolio will help you get started with a portfolio website where you could showcase your work + a blog that will help you spread your ideas into real world.
156,https://github.com/joferkington/mplstereonet,Allen Mao,mplstereonet provides lower-hemisphere equal-area and equal-angle stereonets for matplotlib.
157,https://github.com/joferkington/mplstereonet,Allen Mao,"All planar measurements are expected to follow the right-hand-rule to indicate dip direction. As an example, 315/30S would be 135/30 following the right-hand rule."
158,https://github.com/joferkington/mplstereonet,Allen Mao,"By default, a modified Kamb method with exponential smoothing [Vollmer1995] is used to estimate the orientation density distribution. Other methods (such as the ""traditional"" Kamb [Kamb1956] and ""Schmidt"" (a.k.a. 1%) methods) are available as well. The method and expected count (in standard deviations) can be controlled by the method and sigma keyword arguments, respectively."
159,https://github.com/joferkington/mplstereonet,Allen Mao,mplstereonet also includes a number of utilities to parse structural measurements in either quadrant or azimuth form such that they follow the right-hand-rule.
160,https://github.com/jupyter-widgets/ipyleaflet,Allen Mao,A Jupyter / Leaflet bridge enabling interactive maps in the Jupyter notebook.
161,https://github.com/jwass/mplleaflet,Allen Mao,mplleaflet
162,https://github.com/jwass/mplleaflet,Allen Mao,"mplleaflet is a Python library that converts a matplotlib plot into a webpage containing a pannable, zoomable Leaflet map. It can also embed the Leaflet map in an IPython notebook. The goal of mplleaflet is to enable use of Python and matplotlib for visualizing geographic data on slippy maps without having to write any Javascript or HTML. You also don't need to worry about choosing the base map content i.e., coastlines, roads, etc."
163,https://github.com/jwass/mplleaflet,Allen Mao,"Normally, displaying data as longitude, latitude will cause a cartographer to cry. That's totally fine with mplleaflet, Leaflet will project your data properly."
164,https://github.com/jwass/mplleaflet,Allen Mao,"Other Python libraries, basemap and folium, exist to create maps in Python. However mplleaflet allows you to leverage all matplotlib capability without having to set up the background basemap. You can use plot() to style points and lines, and you can also use more complex functions like contour(), quiver(), etc. Furthermore, with mplleaflet you no longer have to worry about setting up the basemap. Displaying continents or roads is determined automatically by the zoom level required to view the physical size of the data. You should use a different library if you need fine control over the basemap, or need a geographic projection other than spherical mercator."
165,https://github.com/kinverarity1/lasio/,Allen Mao,"This is a Python 2.7 and 3.3+ package to read and write Log ASCII Standard (LAS) files, used for borehole data such as geophysical, geological, or petrophysical logs. It's compatible with versions 1.2 and 2.0 of the LAS file specification, published by the Canadian Well Logging Society. Support for LAS 3 is being worked on. In principle it is designed to read as many types of LAS files as possible, including ones containing common errors or non-compliant formatting."
166,https://github.com/kinverarity1/lasio/,Allen Mao,"Depending on your particular application you may also want to check out striplog for stratigraphic/lithological data, or welly for dealing with data at the well level. lasio is primarily for reading & writing LAS files."
167,https://github.com/kinverarity1/lasio/,Allen Mao,"Note this is not a package for reading LiDAR data (also called ""LAS files"")"
168,https://github.com/kosmtik/kosmtik,Allen Mao,Very lite but extendable mapping framework to create Mapnik ready maps with OpenStreetMap data (and more).
169,https://github.com/kosmtik/kosmtik,Allen Mao,"For now, only Carto based projects are supported (with .mml or .yml config), but in the future we hope to plug in MapCSS too."
170,https://github.com/kosmtik/kosmtik,Allen Mao,Lite
171,https://github.com/kosmtik/kosmtik,Allen Mao,Only the core needs:
172,https://github.com/kosmtik/kosmtik,Allen Mao,project loading
173,https://github.com/kosmtik/kosmtik,Allen Mao,local configuration management
174,https://github.com/kosmtik/kosmtik,Allen Mao,tiles server for live feedback when coding
175,https://github.com/kosmtik/kosmtik,Allen Mao,"exports to common formats (Mapnik XML, PNG…)"
176,https://github.com/kosmtik/kosmtik,Allen Mao,hooks everywhere to make easy to extend it with plugins
177,https://github.com/mapbox/geojson-vt,Allen Mao,"A highly efficient JavaScript library for slicing GeoJSON data into vector tiles on the fly, primarily designed to enable rendering and interacting with large geospatial datasets on the browser side (without a server)."
178,https://github.com/mapbox/geojson-vt,Allen Mao,"Created to power GeoJSON in Mapbox GL JS, but can be useful in other visualization platforms like Leaflet and d3, as well as Node.js server applications."
179,https://github.com/mapbox/geojson-vt,Allen Mao,"Resulting tiles conform to the JSON equivalent of the vector tile specification. To make data rendering and interaction fast, the tiles are simplified, retaining the minimum level of detail appropriate for each zoom level (simplifying shapes, filtering out tiny polygons and polylines)."
180,https://github.com/mapbox/geojson-vt,Allen Mao,Read more on how the library works on the Mapbox blog.
181,https://github.com/mapbox/geojson-vt,Allen Mao,There's a C++11 port: geojson-vt-cpp
182,https://github.com/mapbox/rasterio,Allen Mao,Rasterio reads and writes geospatial raster data.
183,https://github.com/mapbox/rasterio,Allen Mao,"Geographic information systems use GeoTIFF and other formats to organize and store gridded, or raster, datasets. Rasterio reads and writes these formats and provides a Python API based on N-D arrays."
184,https://github.com/mapbox/rasterio,Allen Mao,"Rasterio 1.0.x works with Python versions 2.7.x and 3.5.0 through 3.7.x, and GDAL versions 1.11.x through 2.4.x. Official binary packages for Linux and Mac OS X are available on PyPI. Unofficial binary packages for Windows are available through other channels."
185,https://github.com/mapbox/rasterio,Allen Mao,Rasterio 1.0.x is not compatible with GDAL versions 3.0.0 or greater.
186,https://github.com/mapbox/tilelive-mapnik,Allen Mao,Renderer backend for tilelive.js that uses node-mapnik to render tiles and grids from a Mapnik XML file. tilelive-mapnik implements the Tilesource API.
187,https://github.com/mapbox/tippecanoe,Allen Mao,"Builds vector tilesets from large (or small) collections of GeoJSON, Geobuf, or CSV features, like these."
188,https://github.com/mapbox/tippecanoe,Allen Mao,Intent
189,https://github.com/mapbox/tippecanoe,Allen Mao,"The goal of Tippecanoe is to enable making a scale-independent view of your data, so that at any level from the entire world to a single building, you can see the density and texture of the data rather than a simplification from dropping supposedly unimportant features or clustering or aggregating them."
190,https://github.com/mapbox/tippecanoe,Allen Mao,"If you give it all of OpenStreetMap and zoom out, it should give you back something that looks like ""All Streets"" rather than something that looks like an Interstate road atlas."
191,https://github.com/mapbox/tippecanoe,Allen Mao,"If you give it all the building footprints in Los Angeles and zoom out far enough that most individual buildings are no longer discernable, you should still be able to see the extent and variety of development in every neighborhood, not just the largest downtown buildings."
192,https://github.com/mapbox/tippecanoe,Allen Mao,"If you give it a collection of years of tweet locations, you should be able to see the shape and relative popularity of every point of interest and every significant travel corridor."
193,https://github.com/mbloch/mapshaper,Allen Mao,"Mapshaper is software for editing Shapefile, GeoJSON, TopoJSON, CSV and several other data formats, written in JavaScript."
194,https://github.com/mbloch/mapshaper,Allen Mao,"The mapshaper command line program supports essential map making tasks like simplifying shapes, editing attribute data, clipping, erasing, dissolving, filtering and more."
195,https://github.com/mbloch/mapshaper,Allen Mao,"The web UI supports interactive simplification, attribute data editing, and running cli commands in a built-in console. Visit the public website at www.mapshaper.org or use the web UI locally via the mapshaper-gui script."
196,https://github.com/msracver/Flow-Guided-Feature-Aggregation,Allen Mao,"This repository is implemented by Yuqing Zhu, Shuhao Fu, and Xizhou Zhu, when they are interns at MSRA."
197,https://github.com/msracver/Flow-Guided-Feature-Aggregation,Allen Mao,"Flow-Guided Feature Aggregation (FGFA) is initially described in an ICCV 2017 paper. It provides an accurate and end-to-end learning framework for video object detection. The proposed FGFA method, together with our previous work of Deep Feature Flow, powered the winning entry of ImageNet VID 2017. It is worth noting that:"
198,https://github.com/msracver/Flow-Guided-Feature-Aggregation,Allen Mao,"FGFA improves the per-frame features by aggregating nearby frame features along the motion paths. It significantly improves the object detection accuracy in videos, especially for fast moving objects."
199,https://github.com/msracver/Flow-Guided-Feature-Aggregation,Allen Mao,"FGFA is end-to-end trainable for the task of video object detection, which is vital for improving the recognition accuracy."
200,https://github.com/msracver/Flow-Guided-Feature-Aggregation,Allen Mao,"We proposed to evaluate the detection accuracy for slow, medium and fast moving objects respectively, for better understanding and analysis of video object detection. The motion-specific evaluation code is included in this repository."
201,https://github.com/nypl-spacetime/map-vectorizer,Allen Mao,"This project aims to automate the manual process of geographic polygon and attribute data extraction from maps (i.e. georectified images) including those from insurance atlases published in the 19th and early 20th centuries. Here is some background on why we're doing this and here is one of the maps we're extracting polygons from. This example map layer shows what these atlases look like once geo-rectified, i.e. geographically normalized."
202,https://github.com/nypl-spacetime/map-vectorizer,Allen Mao,The New York Public Library has hundreds of atlases with tens of thousands of these sheets and there is no way we can extract data manually in a reasonable amount of time.
203,https://github.com/nypl-spacetime/map-vectorizer,Allen Mao,"Just so you get an idea, it took NYPL staff coordinating a small army of volunteers three years to produce 170,000 polygons with attributes (from just four of hundreds of atlases at NYPL)."
204,https://github.com/nypl-spacetime/map-vectorizer,Allen Mao,It now takes a period of time closer to 24 hours to generate a comparable number of polygons with some basic metadata.
205,https://github.com/odoe/generator-arcgis-js-app,Allen Mao,This is a yeoman generator for ArcGIS API for JavaScript applications.
206,https://github.com/odoe/generator-arcgis-js-app,Allen Mao,"Basically, he wears a top hat, lives in your computer, and waits for you to tell him what kind of application you wish to create."
207,https://github.com/odoe/generator-arcgis-js-app,Allen Mao,"Not every new computer comes with a Yeoman pre-installed. He lives in the npm package repository. You only have to ask for him once, then he packs up and moves into your hard drive. Make sure you clean up, he likes new and shiny things."
208,https://github.com/odoe/generator-arcgis-js-app,Allen Mao,"Yeoman travels light. He didn't pack any generators when he moved in. You can think of a generator like a plug-in. You get to choose what type of application you wish to create, such as a Backbone application or even a Chrome extension."
209,https://github.com/odoe/generator-arcgis-js-app,Allen Mao,"Yeoman has a heart of gold. He's a person with feelings and opinions, but he's very easy to work with. If you think he's too opinionated, he can be easily convinced."
210,https://github.com/ondrolexa/apsg,Allen Mao,"APSG defines several new python classes to easily manage, analyze and visualize orientational structural geology data."
211,https://github.com/phoenix104104/LapSRN,Allen Mao,"The Laplacian Pyramid Super-Resolution Network (LapSRN) is a progressive super-resolution model that super-resolves an low-resolution images in a coarse-to-fine Laplacian pyramid framework. Our method is fast and achieves state-of-the-art performance on five benchmark datasets for 4x and 8x SR. For more details and evaluation results, please check out our project webpage and paper."
212,https://github.com/phuang17/DeepMVS,Allen Mao,DeepMVS is a Deep Convolutional Neural Network which learns to estimate pixel-wise disparity maps from a sequence of an arbitrary number of unordered images with the camera poses already known or estimated.
213,https://github.com/phuang17/DeepMVS,Allen Mao,"If you use our codes or datasets in your work, please cite:"
214,https://github.com/pysal/pysal/,Allen Mao,"PySAL, the Python spatial analysis library, is an open source cross-platform library for geospatial data science with an emphasis on geospatial vector data written in Python. It supports the development of high level applications for spatial analysis, such as"
215,https://github.com/pysal/pysal/,Allen Mao,"detection of spatial clusters, hot-spots, and outliers"
216,https://github.com/pysal/pysal/,Allen Mao,construction of graphs from spatial data
217,https://github.com/pysal/pysal/,Allen Mao,spatial regression and statistical modeling on geographically embedded networks
218,https://github.com/pysal/pysal/,Allen Mao,spatial econometrics
219,https://github.com/pysal/pysal/,Allen Mao,exploratory spatio-temporal data analysis
220,https://github.com/pysal/pysal/,Allen Mao,PySAL Components
221,https://github.com/pysal/pysal/,Allen Mao,"explore - modules to conduct exploratory analysis of spatial and spatio-temporal data, including statistical testing on points, networks, and polygonal lattices. Also includes methods for spatial inequality and distributional dynamics."
222,https://github.com/pysal/pysal/,Allen Mao,"viz - visualize patterns in spatial data to detect clusters, outliers, and hot-spots."
223,https://github.com/pysal/pysal/,Allen Mao,"model - model spatial relationships in data with a variety of linear, generalized-linear, generalized-additive, and nonlinear models."
224,https://github.com/pysal/pysal/,Allen Mao,lib - solve a wide variety of computational geometry problems:
225,https://github.com/pysal/pysal/,Allen Mao,"graph construction from polygonal lattices, lines, and points."
226,https://github.com/pysal/pysal/,Allen Mao,construction and interactive editing of spatial weights matrices & graphs
227,https://github.com/pysal/pysal/,Allen Mao,"computation of alpha shapes, spatial indices, and spatial-topological relationships"
228,https://github.com/pysal/pysal/,Allen Mao,"reading and writing of sparse graph data, as well as pure python readers of spatial vector data."
229,https://github.com/pyvista/pymeshfix,Allen Mao,"Python/Cython wrapper of Marco Attene's wonderful, award-winning MeshFix software. This module brings the speed of C++ with the portability and ease of installation of Python."
230,https://github.com/pyvista/pymeshfix,Allen Mao,"This software takes as input a polygon mesh and produces a copy of the input where all the occurrences of a specific set of ""defects"" are corrected. MeshFix has been designed to correct typical flaws present in raw digitized mesh models, thus it might fail or produce coarse results if run on other sorts of input meshes (e.g. tessellated CAD models)."
231,https://github.com/pyvista/pymeshfix,Allen Mao,"The input is assumed to represent a single closed solid object, thus the output will be a single watertight triangle mesh bounding a polyhedron. All the singularities, self-intersections and degenerate elements are removed from the input, while regions of the surface without defects are left unmodified."
232,https://github.com/pyvista/pymeshfix,Allen Mao,"One of the main reasons to bring MeshFix to Python is to allow the library to communicate to other python programs without having to use the hard drive. Therefore, this example assumes that you have a mesh within memory and wish to repair it using MeshFix."
233,https://github.com/pyvista/pyvista,Allen Mao,"PyVista is a helper module for the Visualization Toolkit (VTK) that takes a different approach on interfacing with VTK through NumPy and direct array access. This package provides a Pythonic, well-documented interface exposing VTK's powerful visualization backend to facilitate rapid prototyping, analysis, and visual integration of spatially referenced datasets."
234,https://github.com/pyvista/pyvista,Allen Mao,This module can be used for scientific plotting for presentations and research papers as well as a supporting module for other mesh 3D rendering dependent Python modules; see Connections for a list of projects that leverage PyVista.
235,https://github.com/pyvista/pyvista,Allen Mao,Overview of Features
236,https://github.com/pyvista/pyvista,Allen Mao,Embeddable rendering in Jupyter Notebooks
237,https://github.com/pyvista/pyvista,Allen Mao,Filtering/plotting tools built for interactivity in Jupyter notebooks (see IPython Tools)
238,https://github.com/pyvista/pyvista,Allen Mao,Direct access to mesh analysis and transformation routines (see Filters)
239,https://github.com/pyvista/pyvista,Allen Mao,Intuitive plotting routines with matplotlib similar syntax (see Plotting)
240,https://github.com/pyvista/pyvista,Allen Mao,Import meshes from many common formats (use pyvista.read())
241,https://github.com/pyvista/pyvista,Allen Mao,"Export meshes as VTK, STL, OBJ, or PLY file types"
242,https://github.com/pyvista/tetgen,Allen Mao,This Python module is an interface to Hang Si's TetGen C++ software. This module combines speed of C++ with the portability and ease of installation of Python along with integration to PyVista for 3D visualization and analysis. See the TetGen GitHub page for more details on the original creator.
243,https://github.com/pyvista/tetgen,Allen Mao,"The last update to the original C++ software was on 19 January 2011, but the software remains relevant today. Brief description from Weierstrass Institute Software:"
244,https://github.com/pyvista/tetgen,Allen Mao,"TetGen is a program to generate tetrahedral meshes of any 3D polyhedral domains. TetGen generates exact constrained Delaunay tetrahedralization, boundary conforming Delaunay meshes, and Voronoi partitions."
245,https://github.com/pyvista/tetgen,Allen Mao,"TetGen provides various features to generate good quality and adaptive tetrahedral meshes suitable for numerical methods, such as finite element or finite volume methods. For more information of TetGen, please take a look at a list of features."
246,https://github.com/rowanz/neural-motifs,Allen Mao,"This repository contains data and code for the paper Neural Motifs: Scene Graph Parsing with Global Context (CVPR 2018) For the project page (as well as links to the baseline checkpoints), check out rowanzellers.com/neuralmotifs."
247,https://github.com/salihkaragoz/pose-residual-network-pytorch,Allen Mao,This repository contains a PyTorch implementation of the Pose Residual Network (PRN) presented in our ECCV 2018 paper:
248,https://github.com/sentinelsat/sentinelsat,Allen Mao,"Sentinelsat makes searching, downloading and retrieving the metadata of Sentinel satellite images from the Copernicus Open Access Hub easy."
249,https://github.com/tensorflow/tensorflow,Allen Mao,"TensorFlow is an open source software library for numerical computation using data flow graphs. The graph nodes represent mathematical operations, while the graph edges represent the multidimensional data arrays (tensors) that flow between them. This flexible architecture enables you to deploy computation to one or more CPUs or GPUs in a desktop, server, or mobile device without rewriting code. TensorFlow also includes TensorBoard, a data visualization toolkit."
250,https://github.com/tensorflow/tensorflow,Allen Mao,"TensorFlow was originally developed by researchers and engineers working on the Google Brain team within Google's Machine Intelligence Research organization for the purposes of conducting machine learning and deep neural networks research. The system is general enough to be applicable in a wide variety of other domains, as well."
251,https://github.com/tensorflow/tensorflow,Allen Mao,"TensorFlow provides stable Python and C APIs as well as non-guaranteed backwards compatible API's for C++, Go, Java, JavaScript, and Swift."
252,https://github.com/twbs/bootstrap,Allen Mao,"Sleek, intuitive, and powerful front-end framework for faster and easier web development. "
253,https://github.com/ungarj/tilematrix,Allen Mao,Tilematrix handles geographic web tiles and tile pyramids.
254,https://github.com/ungarj/tilematrix,Allen Mao,"The module is designed to translate between tile indices (zoom, row, column) and map coordinates (e.g. latitute, longitude)."
255,https://github.com/ungarj/tilematrix,Allen Mao,Tilematrix supports metatiling and tile buffers. Furthermore it makes heavy use of shapely and it can also generate Affine objects per tile which facilitates working with rasterio for tile based data reading and writing.
256,https://github.com/ungarj/tilematrix,Allen Mao,"It is very similar to mercantile but besides of supporting spherical mercator tile pyramids, it also supports geodetic (WGS84) tile pyramids."
257,https://github.com/vuejs/vue,Allen Mao,"Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications."
258,https://github.com/whimian/pyGeoPressure,Allen Mao,A Python package for pore pressure prediction using well log data and seismic velocity data.
259,https://github.com/whimian/pyGeoPressure,Allen Mao,Overburden (or Lithostatic) Pressure Calculation
260,https://github.com/whimian/pyGeoPressure,Allen Mao,Eaton's method and Parameter Optimization
261,https://github.com/whimian/pyGeoPressure,Allen Mao,Bowers' method and Parameter Optimization
262,https://github.com/whimian/pyGeoPressure,Allen Mao,Multivariate method and Parameter Optimization
263,https://github.com/wuhuikai/DeepGuidedFilter,Allen Mao,Official implementation of Fast End-to-End Trainable Guided Filter.
264,https://github.com/wuhuikai/DeepGuidedFilter,Allen Mao,"Faster, Better and Lighter for image processing and dense prediction."
265,https://github.com/wuhuikai/DeepGuidedFilter,Allen Mao,Overview
266,https://github.com/wuhuikai/DeepGuidedFilter,Allen Mao,DeepGuidedFilter is the author's implementation of the deep learning building block for joint upsampling described in:
267,https://github.com/wuhuikai/DeepGuidedFilter,Allen Mao,"Given a reference image pair in high-resolution and low-resolution, our algorithm generates high-resolution target from the low-resolution input. Through joint training with CNNs, our algorithm achieves the state-of-the-art performance while runs 10-100 times faster."
268,https://github.com/yuhuayc/da-faster-rcnn,Allen Mao,"This is the implementation of our CVPR 2018 work 'Domain Adaptive Faster R-CNN for Object Detection in the Wild'. The aim is to improve the cross-domain robustness of object detection, in the screnario where training and test data are drawn from different distributions. The original paper can be found here."
269,https://github.com/yulunzhang/RDN,Allen Mao,This repository is for RDN introduced in the following paper
270,https://github.com/yulunzhang/RDN,Allen Mao,"The code is built on EDSR (Torch) and tested on Ubuntu 14.04 environment (Torch7, CUDA8.0, cuDNN5.1) with Titan X/1080Ti/Xp GPUs."
271,https://github.com/yulunzhang/RDN,Allen Mao,"A very deep convolutional neural network (CNN) has recently achieved great success for image super-resolution (SR) and offered hierarchical features as well. However, most deep CNN based SR models do not make full use of the hierarchical features from the original low-resolution (LR) images, thereby achieving relatively-low performance. In this paper, we propose a novel residual dense network (RDN) to address this problem in image SR. We fully exploit the hierarchical features from all the convolutional layers. Speciﬁcally, we propose residual dense block (RDB) to extract abundant local features via dense connected convolutional layers. RDB further allows direct connections from the state of preceding RDB to all the layers of current RDB, leading to a contiguous memory (CM) mechanism. Local feature fusion in RDB is then used to adaptively learn more effective features from preceding and current local features and stabilizes the training of wider network. After fully obtaining dense local features, we use global feature fusion to jointly and adaptively learn global hierarchical features in a holistic way. Experiments on benchmark datasets with different degradation models show that our RDN achieves favorable performance against state-of-the-art methods."
272,https://github.com/zhiqiangdon/CU-Net,Allen Mao,"The follwoing figure gives an illustration of naive dense U-Net, stacked U-Nets and coupled U-Nets (CU-Net). The naive dense U-Net and stacked U-Nets have shortcut connections only inside each U-Net. In contrast, the coupled U-Nets also have connections for semantic blocks across U-Nets. The CU-Net is a hybrid of naive dense U-Net and stacked U-Net, integrating the merits of both dense connectivity, intermediate supervisions and multi-stage top-down and bottom-up refinement. The resulted CU-Net could save ~70% parameters of the previous stacked U-Nets but with comparable accuracy."
273,https://github.com/zhiqiangdon/CU-Net,Allen Mao,"If we couple each U-Net pair in multiple U-Nets, the coupling connections would have quadratic growth with respect to the U-Net number. To make the model more parameter efficient, we propose the order-K coupling to trim off the long-distance coupling connections."
274,https://github.com/zhiqiangdon/CU-Net,Allen Mao,"For simplicity, each dot represents one U-Net. The red and blue lines are the shortcut connections of inside semantic blocks and outside inputs. Order-0 connectivity (Top) strings U-Nets together only by their inputs and outputs, i.e. stacked U-Nets. Order-1 connectivity (Middle) has shortcut connections for adjacent U-Nets. Similarly, order-2 connectivity (Bottom) has shortcut connections for 3 nearby U-Nets."
275,https://github.com/cltk/cltk,Rosna Thomas,The Classical Language Toolkit
276,https://github.com/cltk/cltk,Rosna Thomas,"The Classical Language Toolkit (CLTK) offers natural language processing (NLP) support for the languages of Ancient, Classical, and Medieval Eurasia. Greek, Latin, Akkadian, and the Germanic languages are currently most complete. The goals of the CLTK are to:"
277,https://github.com/cltk/cltk,Rosna Thomas,*   compile analysis-friendly corpora;
278,https://github.com/cltk/cltk,Rosna Thomas,*   collect and generate linguistic data;
279,https://github.com/cltk/cltk,Rosna Thomas,*   act as a free and open platform for generating scientific research.
280,https://github.com/facebookresearch/DensePose,Rosna Thomas,Dense Human Pose Estimation In The Wild
281,https://github.com/facebookresearch/DensePose,Rosna Thomas,"Rıza Alp Güler, Natalia Neverova, Iasonas Kokkinos"
282,https://github.com/facebookresearch/DensePose,Rosna Thomas,Dense human pose estimation aims at mapping all human pixels of an RGB image to the 3D surface of the human body. 
283,https://github.com/facebookresearch/DensePose,Rosna Thomas,DensePose-RCNN is implemented in the Detectron framework and is powered by Caffe2.
284,https://github.com/facebookresearch/DensePose,Rosna Thomas,"In this repository, we provide the code to train and evaluate DensePose-RCNN. We also provide notebooks to visualize the collected DensePose-COCO dataset and show the correspondences to the SMPL model."
285,https://github.com/facebookresearch/ResNeXt,Rosna Thomas,ResNeXt: Aggregated Residual Transformations for Deep Neural Networks
286,https://github.com/facebookresearch/ResNeXt,Rosna Thomas,ResNeXt is the foundation of their new SENet architecture (a ResNeXt-152 (64 x 4d) with the Squeeze-and-Excitation module)!
287,https://github.com/facebookresearch/ResNeXt,Rosna Thomas,This repository contains a Torch implementation for the ResNeXt algorithm for image classification. The code is based on fb.resnet.torch.
288,https://github.com/facebookresearch/ResNeXt,Rosna Thomas,"ResNeXt is a simple, highly modularized network architecture for image classification. Our network is constructed by repeating a building block that aggregates a set of transformations with the same topology. Our simple design results in a homogeneous, multi-branch architecture that has only a few hyper-parameters to set. This strategy exposes a new dimension, which we call “cardinality” (the size of the set of transformations), as an essential factor in addition to the dimensions of depth and width."
289,https://github.com/facebookresearch/pyrobot,Rosna Thomas,"PyRobot is a light weight, high-level interface which provides hardware independent APIs for robotic manipulation and navigation. This repository also contains the low-level stack for LoCoBot, a low cost mobile manipulator hardware platform."
290,https://github.com/gitbucket/gitbucket,Rosna Thomas,GitBucket is a Git web platform powered by Scala offering:
291,https://github.com/gitbucket/gitbucket,Rosna Thomas,"You can try an online demo (ID: root / Pass: root) of GitBucket, and also get the latest information at GitBucket News."
292,https://github.com/harismuneer/Ultimate-Facebook-Scraper,Rosna Thomas,🔥 Ultimate Facebook Scrapper
293,https://github.com/harismuneer/Ultimate-Facebook-Scraper,Rosna Thomas,A bot which scrapes almost everything about a facebook user's profile including
294,https://github.com/harismuneer/Ultimate-Facebook-Scraper,Rosna Thomas,"The best thing about this scraper is that the data is scraped in an organized format so that it can be used for educational/research purpose by researchers. Moreover, this scraper does not use Facebook's Graph API so there are no rate limiting issues as such. "
295,https://github.com/nextflow-io/nextflow,Rosna Thomas,Nextflow is a bioinformatics workflow manager that enables the development of portable and reproducible workflows.
296,https://github.com/nextflow-io/nextflow,Rosna Thomas,"It supports deploying workflows on a variety of execution platforms including local, HPC schedulers, AWS Batch,"
297,https://github.com/nextflow-io/nextflow,Rosna Thomas,"Google Genomics Pipelines, and Kubernetes. Additionally, it provides support for manage your workflow dependencies"
298,https://github.com/nextflow-io/nextflow,Rosna Thomas,"through built-in support for Conda, Docker, Singularity, and Modules."
299,https://github.com/nextflow-io/nextflow,Rosna Thomas,"Nextflow framework is based on the dataflow programming model, which greatly simplifies writing parallel and distributed pipelines without adding unnecessary complexity and letting you concentrate on the flow of data, i.e. the functional logic of the application/algorithm."
300,https://github.com/nextflow-io/nextflow,Rosna Thomas,"It doesn't aim to be another pipeline scripting language yet, but it is built around the idea that the Linux platform is the lingua franca of data science, since it provides many simple command line and scripting tools, which by themselves are powerful, but when chained together facilitate complex data manipulations."
301,https://github.com/nextflow-io/nextflow,Rosna Thomas,"In practice, this means that a Nextflow script is defined by composing many different processes. Each process can execute a given bioinformatics tool or scripting language, to which is added the ability to coordinate and synchronize the processes execution by simply specifying their inputs and outputs."
302,https://github.com/nextflow-io/nextflow,Rosna Thomas,"Nextflow also supports running workflows across various clouds and cloud technologies. Nextflow can create AWS EC2 or Google GCE clusters and deploy your workflow. Managed solutions from both Amazon and Google are also supported through AWS Batch and Google Genomics Pipelines. Additionally, Nextflow can run workflows on either on-prem or managed cloud Kubernetes clusters. "
303,https://github.com/nextflow-io/nextflow,Rosna Thomas,"Nextflow is built on two great pieces of open source software, namely <a href='http://groovy-lang.org' target='_blank'>Groovy</a>"
304,https://github.com/pyro-ppl/pyro,Rosna Thomas,"Pyro is a flexible, scalable deep probabilistic programming library built on PyTorch.  Notably, it was designed with these principles in mind:"
305,https://github.com/pyro-ppl/pyro,Rosna Thomas,Universal: Pyro is a universal PPL - it can represent any computable probability distribution.
306,https://github.com/pyro-ppl/pyro,Rosna Thomas,Scalable: Pyro scales to large data sets with little overhead compared to hand-written code.
307,https://github.com/pyro-ppl/pyro,Rosna Thomas,"Minimal: Pyro is agile and maintainable. It is implemented with a small core of powerful, composable abstractions."
308,https://github.com/pyro-ppl/pyro,Rosna Thomas,"Flexible: Pyro aims for automation when you want it, control when you need it. This is accomplished through high-level abstractions to express generative and inference models, while allowing experts easy-access to customize inference."
309,https://github.com/pyro-ppl/pyro,Rosna Thomas,Pyro is in a beta release.  It is developed and maintained by Uber AI Labs and community contributors.
310,https://github.com/reduxjs/react-redux,Rosna Thomas,Official React bindings for Redux.
311,https://github.com/reduxjs/react-redux,Rosna Thomas,Performant and flexible.
312,https://github.com/scikit-image/scikit-image,Rosna Thomas,scikit-image: Image processing in Python
313,https://github.com/scikit-learn/scikit-learn,Rosna Thomas,scikit-learn is a Python module for machine learning built on top of
314,https://github.com/scikit-learn/scikit-learn,Rosna Thomas,SciPy and is distributed under the 3-Clause BSD license.
315,https://github.com/scikit-learn/scikit-learn,Rosna Thomas,The project was started in 2007 by David Cournapeau as a Google Summer
316,https://github.com/scikit-learn/scikit-learn,Rosna Thomas,"of Code project, and since then many volunteers have contributed. See"
317,https://github.com/scikit-learn/scikit-learn,Rosna Thomas,the About us &lt;http://scikit-learn.org/dev/about.html#authors&gt;_ page
318,https://github.com/scikit-learn/scikit-learn,Rosna Thomas,for a list of core contributors.
319,https://github.com/scikit-learn/scikit-learn,Rosna Thomas,It is currently maintained by a team of volunteers.
320,https://github.com/scikit-learn/scikit-learn,Rosna Thomas,Website: http://scikit-learn.org
321,https://github.com/tensorflow/magenta,Rosna Thomas,Magenta is a research project exploring the role of machine learning
322,https://github.com/tensorflow/magenta,Rosna Thomas,in the process of creating art and music.  Primarily this
323,https://github.com/tensorflow/magenta,Rosna Thomas,involves developing new deep learning and reinforcement learning
324,https://github.com/tensorflow/magenta,Rosna Thomas,"algorithms for generating songs, images, drawings, and other materials. But it's also"
325,https://github.com/tensorflow/magenta,Rosna Thomas,an exploration in building smart tools and interfaces that allow
326,https://github.com/tensorflow/magenta,Rosna Thomas,artists and musicians to extend (not replace!) their processes using
327,https://github.com/tensorflow/magenta,Rosna Thomas,these models.  Magenta was started by some researchers and engineers
328,https://github.com/tensorflow/magenta,Rosna Thomas,"from the Google Brain team,"
329,https://github.com/tensorflow/magenta,Rosna Thomas,but many others have contributed significantly to the project. We use
330,https://github.com/tensorflow/magenta,Rosna Thomas,TensorFlow and release our models and
331,https://github.com/tensorflow/magenta,Rosna Thomas,tools in open source on this GitHub.  If you’d like to learn more
332,https://github.com/tensorflow/magenta,Rosna Thomas,"about Magenta, check out our blog,"
333,https://github.com/tensorflow/magenta,Rosna Thomas,where we post technical details.  You can also join our discussion
334,https://github.com/tensorflow/magenta,Rosna Thomas,group.
335,https://github.com/tensorflow/magenta,Rosna Thomas,"This is the home for our Python TensorFlow library. To use our models in the browser with TensorFlow.js, head to the Magenta.js repository."
336,https://github.com/RaRe-Technologies/gensim,Pratheek,"Gensim is a Python library for topic modelling, document indexing and similarity retrieval with large corpora"
337,https://github.com/RaRe-Technologies/gensim,Pratheek,"Target audience is the natural language processing (NLP) and information retrieval (IR) community.

"
338,https://github.com/RaRe-Technologies/gensim,Pratheek,"All algorithms are memory-independent w.r.t. the corpus size (can process input larger than RAM, streamed, out-of-core)"
339,https://github.com/RaRe-Technologies/gensim,Pratheek,easy to plug in your own input corpus/datastream (trivial streaming API)
340,https://github.com/RaRe-Technologies/gensim,Pratheek,easy to extend with other Vector Space algorithms (trivial transformation API)
341,https://github.com/RaRe-Technologies/gensim,Pratheek,"Efficient multicore implementations of popular algorithms, such as online Latent Semantic Analysis (LSA/LSI/SVD), Latent Dirichlet Allocation (LDA), Random Projections (RP), Hierarchical Dirichlet Process (HDP) or word2vec deep learning."
342,https://github.com/RaRe-Technologies/gensim,Pratheek,Distributed computing: can run Latent Semantic Analysis and Latent Dirichlet Allocation on a cluster of computers.
343,https://github.com/stanfordnlp/stanza,Pratheek,The Stanford NLP Group's official Python NLP library.
344,https://github.com/stanfordnlp/stanza,Pratheek,It contains support for running various accurate natural language processing tools on 60+ languages and for accessing the Java Stanford CoreNLP software from Python
345,https://github.com/stanfordnlp/stanza,Pratheek,"For detailed information please visit our official website.

"
346,https://github.com/stanfordnlp/stanza,Pratheek,"A new collection of biomedical and clinical English model packages are now available, supporting syntactic analysis and named entity recognition (NER) from biomedical literature text and clinical notes."
347,https://github.com/stanfordnlp/stanza,Pratheek,"For more information, check out our Biomedical models documentation page."
348,https://github.com/facebookresearch/pytext,Pratheek,PyText is a deep-learning based NLP modeling framework built on PyTorch.
349,https://github.com/facebookresearch/pytext,Pratheek,PyText addresses the often-conflicting requirements of enabling rapid experimentation and of serving models at scale.
350,https://github.com/facebookresearch/pytext,Pratheek," It achieves this by providing simple and extensible interfaces and abstractions for model components, and by using PyTorch’s capabilities of exporting models for inference via the optimized Caffe2 execution engine."
351,https://github.com/facebookresearch/pytext,Pratheek,"We are using PyText in Facebook to iterate quickly on new modeling ideas and then seamlessly ship them at scale.

"
352,https://github.com/facebookresearch/pytext,Pratheek,"Core PyText features:

"
353,https://github.com/facebookresearch/pytext,Pratheek,"Production ready models for various NLP/NLU tasks:
"
354,https://github.com/facebookresearch/pytext,Pratheek,Text classifiers
355,https://github.com/facebookresearch/pytext,Pratheek,Sequence taggers
356,https://github.com/facebookresearch/pytext,Pratheek,Joint intent-slot model
357,https://github.com/facebookresearch/pytext,Pratheek,Contextual intent-slot models
358,https://github.com/facebookresearch/pytext,Pratheek,"Distributed-training support built on the new C10d backend in PyTorch 1.0
"
359,https://github.com/facebookresearch/pytext,Pratheek,Mixed precision training support through APEX (trains faster with less GPU memory on NVIDIA Tensor Cores)
360,https://github.com/facebookresearch/pytext,Pratheek,Extensible components that allows easy creation of new models and tasks
361,https://github.com/facebookresearch/pytext,Pratheek,Reference implementation and a pretrained model for the paper: Gupta et al. (2018): Semantic Parsing for Task Oriented Dialog using Hierarchical Representations
362,https://github.com/facebookresearch/pytext,Pratheek,Ensemble training support
363,https://github.com/NicolasHug/Surprise,Pratheek,Surprise is a Python scikit for building and analyzing recommender systems that deal with explicit rating data.
364,https://github.com/NicolasHug/Surprise,Pratheek,"Surprise was designed with the following purposes in mind:
"
365,https://github.com/NicolasHug/Surprise,Pratheek,"Give users perfect control over their experiments. To this end, a strong emphasis is laid on documentation, which we have tried to make as clear and precise as possible by pointing out every detail of the algorithms."
366,https://github.com/NicolasHug/Surprise,Pratheek,"Alleviate the pain of Dataset handling. Users can use both built-in datasets (Movielens, Jester), and their own custom datasets."
367,https://github.com/NicolasHug/Surprise,Pratheek,"Provide various ready-to-use prediction algorithms such as baseline algorithms, neighborhood methods, matrix factorization-based ( SVD, PMF, SVD++, NMF), and many others. Also, various similarity measures (cosine, MSD, pearson...) are built-in."
368,https://github.com/NicolasHug/Surprise,Pratheek,Make it easy to implement new algorithm ideas.
369,https://github.com/NicolasHug/Surprise,Pratheek,"Provide tools to evaluate, analyse and compare the algorithms' performance. Cross-validation procedures can be run very easily using powerful CV iterators (inspired by scikit-learn excellent tools), as well as exhaustive search over a set of parameters."
370,https://github.com/amitt001/delegator.py,Pratheek,"Delegator.py is a simple library for dealing with subprocesses, inspired by both envoy and pexpect (in fact, it depends on it!).

"
371,https://github.com/amitt001/delegator.py,Pratheek,This module features two main functions delegator.run() and delegator.chain().
372,https://github.com/amitt001/delegator.py,Pratheek,"One runs commands, blocking or non-blocking, and the other runs a chain of commands, separated by the standard unix pipe operator: |."
373,https://github.com/unagiootoro/ruby-dnn,Sharad,ruby-dnn is a ruby deep learning library.
374,https://github.com/unagiootoro/ruby-dnn,Sharad,This library supports full connected neural network and convolution neural network and recurrent neural network.
375,https://github.com/unagiootoro/ruby-dnn,Sharad,"Currently, you can get 99% accuracy with MNIST and 82% with CIFAR 10."
376,https://github.com/ankane/lightgbm,Sharad,LightGBM - high performance gradient boosting - for Ruby
377,https://github.com/ankane/lightgbm,Sharad,This library follows the Python API. A few differences are:
378,https://github.com/ankane/lightgbm,Sharad,The get_ and set_ prefixes are removed from methods
379,https://github.com/ankane/lightgbm,Sharad,The default verbosity is -1
380,https://github.com/ankane/lightgbm,Sharad,"With the cv method, stratified is set to false"
381,https://github.com/ankane/lightgbm,Sharad,Thanks to the xgboost gem for showing how to use FFI.
382,https://github.com/SteelBridgeLabs/neo4j-gremlin-bolt,Sharad,This project allows the use of the Apache Tinkerpop Java API with the neo4j server using the BOLT protocol.
383,https://github.com/LaurentRDC/scikit-ued,Sharad,Collection of algorithms and functions for ultrafast electron diffraction.
384,https://github.com/LaurentRDC/scikit-ued,Sharad,It aims to be a fully-tested package taking advantage of Python's most recent features.
385,https://github.com/LaurentRDC/scikit-ued,Sharad,"For examples, see our tutorials."
386,https://github.com/treeverse/lakeFS,Sharad,lakeFS is an open source layer that delivers resilience and manageability to object-storage based data lakes.
387,https://github.com/treeverse/lakeFS,Sharad,"With lakeFS you can build repeatable, atomic and versioned data lake operations - from complex ETL jobs to data science and analytics."
388,https://github.com/treeverse/lakeFS,Sharad,lakeFS supports AWS S3 or Google Cloud Storage as its underlying storage service.
389,https://github.com/treeverse/lakeFS,Sharad,"It is API compatible with S3, and works seamlessly with all modern data frameworks such as Spark, Hive, AWS Athena, Presto, etc."
390,https://github.com/treeverse/lakeFS,Sharad,For more information see the Official Documentation.
391,https://github.com/airbnb/airpal,Yi Xie,"Airpal is a web-based, query execution tool which leverages Facebook's PrestoDB to make authoring queries and retrieving results simple for users. Airpal provides the ability to find tables, see metadata, browse sample rows, write and edit queries, then submit queries all in a web interface. Once queries are running, users can track query progress and when finished, get the results back through the browser as a CSV (download it or share it with friends). The results of a query can be used to generate a new Hive table for subsequent analysis, and Airpal maintains a searchable history of all queries run within the tool."
392,https://github.com/HumbleSoftware/envisionjs,Yi Xie,Fast interactive HTML5 charts.
393,https://github.com/apache/incubator-echarts,Yi Xie,"Apache ECharts (incubating) is a free, powerful charting and visualization library offering an easy way of adding intuitive, interactive, and highly customizable charts to your commercial products. It is written in pure JavaScript and based on zrender, which is a whole new lightweight canvas library."
394,https://github.com/Codecademy/EventHub,Yi Xie,EventHub enables companies to do cross device event tracking. Events are joined by their associated user on EventHub and can be visualized by the built-in dashboard to answer the following common business questions
395,https://github.com/Codecademy/EventHub,Yi Xie,what is my funnel conversion rate?
396,https://github.com/Codecademy/EventHub,Yi Xie,what is my cohorted KPI retention?
397,https://github.com/Codecademy/EventHub,Yi Xie,which variant in my A/B test has a higher conversion rate?
398,https://github.com/vega/vega,Yi Xie,"Vega is a visualization grammar, a declarative format for creating, saving, and sharing interactive visualization designs. With Vega you can describe data visualizations in a JSON format, and generate interactive views using either HTML5 Canvas or SVG."
399,https://github.com/simbody/simbody,Yidan Zhang,"Simbody is a high-performance, open-source toolkit for science- and engineering-quality simulation of articulated mechanisms, including biomechanical structures such as human and animal skeletons, mechanical systems like robots, vehicles, and machines, and anything else that can be described as a set of rigid bodies interconnected by joints, influenced by forces and motions, and restricted by constraints."
400,https://github.com/cyverse/atmosphere,Yidan Zhang,Atmosphere addresses the growing needs for highly configurable and customized computational resources to support research efforts in plant sciences.
401,https://github.com/darwinlau/CASPR,Yidan Zhang,The Cable-robot Analysis and Simulation Platform for Research (CASPR) is an open-source software platform developed in MATLAB that facilitates a range of analysis approaches on arbitrary cable-robot models.
402,https://github.com/microsoft/tensorwatch,Yidan Zhang,"TensorWatch is a debugging and visualization tool designed for data science, deep learning and reinforcement learning from Microsoft Research."
403,https://github.com/google/TensorNetwork,Yidan Zhang,"A tensor network wrapper for TensorFlow, JAX, PyTorch, and Numpy."
404,https://github.com/fastai/fastai,Ling Li,Welcome to fastai
405,https://github.com/fastai/fastai,Ling Li,fastai simplifies training fast and accurate neural nets using modern best practices
406,https://github.com/CMU-Perceptual-Computing-Lab/openpose,Ling Li,"OpenPose represents the first real-time multi-person system to jointly detect human body, hand, facial, and foot keypoints (in total 135 keypoints) on single images"
407,https://github.com/emilwallner/Screenshot-to-code,Ling Li,The neural network is built in three iterations.
408,https://github.com/emilwallner/Screenshot-to-code,Ling Li," Starting with a Hello World version, followed by the main neural network layers, and ending by training it to generalize."
409,https://github.com/deepmind/sonnet,Ling Li,"Sonnet is a library built on top of TensorFlow 2 designed to provide simple, composable abstractions for machine learning research."
410,https://github.com/deepmind/sonnet,Ling Li,It can be used to construct neural networks for many different purposes
411,https://github.com/deepmind/sonnet,Ling Li,"(un/supervised learning, reinforcement learning, ...)"
412,https://github.com/deepmind/sonnet,Ling Li,Sonnet does not ship with a training framework and users are encouraged to build their own or adopt those built by others.
413,https://github.com/JaidedAI/EasyOCR,Ling Li,"Ready-to-use OCR with 70+ languages supported including Chinese, Japanese, Korean and Thai."
