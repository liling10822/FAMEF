{"description": [{"excerpt": "Bistro is a flexible distributed scheduler, a high-performance framework supporting multiple paradigms while retaining ease of configuration, management, and monitoring.", "confidence": [1.0], "technique": "metadata"}], "citation": [], "installation": [{"excerpt": "Bistro needs a 64-bit Linux, Folly, FBThrift, Proxygen, boost, and\nlibsqlite3.  You need 2-3GB of RAM to build, as well as GCC 4.9 or above.\n\n`build/README.md` documents the usage of Docker-based scripts that build\nBistro on Ubuntu 14.04, 16.04, and Debian 8.6.  You should be able to follow\nvery similar steps on most modern Linux distributions.\n\nIf you run into dependency problems, look at `bistro/cmake/setup.cmake` for\na full list of Bistro's external dependencies (direct and indirect).  We\ngratefully accept patches that improve Bistro's builds, or add support for\nvarious flavors of Linux and Mac OS.\n\nThe binaries will be in `bistro/cmake/{Debug,Release}`.  Available build\ntargets are explained here:\n   http://cmake.org/Wiki/CMake_Useful_Variables#Compilers_and_Tools\nYou can start Bistro's unit tests by running `ctest` in those directories.\n\n", "confidence": [1], "technique": "wordnet"}], "invocation": [], "license": {"excerpt": {"name": "MIT License", "url": "https://api.github.com/licenses/mit"}, "confidence": [1.0], "technique": "metadata"}, "requirement": [{"excerpt": "Bistro needs a 64-bit Linux, Folly, FBThrift, Proxygen, boost, and\nlibsqlite3.  You need 2-3GB of RAM to build, as well as GCC 4.9 or above.\n\n`build/README.md` documents the usage of Docker-based scripts that build\nBistro on Ubuntu 14.04, 16.04, and Debian 8.6.  You should be able to follow\nvery similar steps on most modern Linux distributions.\n\nIf you run into dependency problems, look at `bistro/cmake/setup.cmake` for\na full list of Bistro's external dependencies (direct and indirect).  We\ngratefully accept patches that improve Bistro's builds, or add support for\nvarious flavors of Linux and Mac OS.\n\nThe binaries will be in `bistro/cmake/{Debug,Release}`.  Available build\ntargets are explained here:\n   http://cmake.org/Wiki/CMake_Useful_Variables#Compilers_and_Tools\nYou can start Bistro's unit tests by running `ctest` in those directories.\n\n", "confidence": [1], "technique": "wordnet"}], "run": [{"excerpt": "[![Build Status](https://travis-ci.org/facebook/bistro.svg?branch=master)](https://travis-ci.org/facebook/bistro)\n\nThis README is a very abbreviated introduction to Bistro. Visit\nhttp://facebook.github.io/bistro for a more structured introduction, and for the docs.\n\nBistro is a toolkit for making distributed computation systems. It can\nschedule and run distributed tasks, including data-parallel jobs.  It\nenforces resource constraints for worker hosts and data-access bottlenecks.\nIt supports remote worker pools, low-latency batch scheduling, dynamic\nshards, and a variety of other possibilities.  It has command-line and web\nUIs.\n\nSome of the diverse problems that Bistro solved at Facebook:\n - Safely run map-only ETL tasks against live production databases (MySQL,\n   HBase, Postgres).\n - Provide a resource-aware job queue for batch CPU/GPU compute jobs.\n - Replace Hadoop for a periodic online data compression task on HBase,\n   improving time-to-completion and reliability by over 10x.\n\nYou can run Bistro \"out of the box\" to suit a variety of different\napplications, but even so, it is a tool for engineers.  You should be able\nto get started just by reading the documentation, but when in doubt, look at\nthe code --- it was written to be read.\n\nSome applications of Bistro may involve writing small plugins to make it fit\nyour needs.  The code is built to be extensible.  Ask for tips, and we'll do\nour best to [help](https://www.facebook.com/groups/bistro.scheduler).  In\nreturn, we hope that you will send a pull request to allow us to share your\nwork with the community.\n\n", "confidence": [1], "technique": "wordnet"}, {"excerpt": "This is just one simple demo, but Bistro is a very flexible tool. Refer to\nhttp://facebook.github.io/bistro/ for more in-depth information.\n\nWe are going to start a single Bistro scheduler talking to one 'remote'\nworker.\n\nAside: The scheduler tracks jobs, and data shards on which to execute them.\nIt also makes sure only to start new tasks when the required resources are\navailable.  The remote worker is a module for executing centrally scheduled\nwork on many machines.  The UI can aggregate many schedulers at once, so\nusing remote workers is optional --- a share-nothing, many-scheduler system\nis sometimes preferable.\n\nLet's make a task to execute:\n\n```\ncat  ~/demo_bistro_task.sh\n#:!/bin/bash\necho \"I got these arguments: \\$@\"\necho \"stderr is also logged\" 1>&2\necho \"done\" > \"\\$2\"  #: Report the task status to Bistro via a named pipe\nEOF\nchmod u+x ~/demo_bistro_task.sh\n```\n\nOpen two terminals, one for the scheduler, and one for the worker.\n\n```\n#: In both terminals\ncd bistro/bistro\n#: Start the scheduler in one terminal\n./cmake/Debug/server/bistro_scheduler \\\n  --server_port=6789 --http_server_port=6790 \\\n  --config_file=scripts/test_configs/simple --clean_statuses \\\n  --CAUTION_startup_wait_for_workers=1 --instance_node_name=scheduler\n#: Start the worker in another\nmkdir /tmp/bistro_worker\n./cmake/Debug/worker/bistro_worker --server_port=27182 --scheduler_host=:: \\\n  --scheduler_port=6789 --worker_command=\"$HOME/demo_bistro_task.sh\" \\\n  --data_dir=/tmp/bistro_worker\n```\n\nYou should be seeing some lively log activity on both terminals. In several\nseconds, the worker-scheduler negotiation should complete, and you should\nsee messages like \"Task ...  quit with status\" and \"Got status\".\n\nSince we passed `--clean_statuses`, the scheduler will not persist any task\ncompletions that happened during this run.  The worker, on the other hand,\nwill keep a record of the task logs in `/tmp/bistro_worker/task_logs.sql3`.\n\nIf you want task completions to persist across runs, tell Bistro where to\nput the SQLite database, via `--data_dir=/tmp/bistro_scheduler` and\n`--status_table=task_statuses`\n\n```\nmkdir /tmp/bistro_scheduler\n./cmake/Debug/server/bistro_scheduler \\\n  --server_port=6789 --http_server_port=6790 \\\n  --config_file=scripts/test_configs/simple \\\n  --data_dir=/tmp/bistro_scheduler --status_table=task_statuses \\\n  --CAUTION_startup_wait_for_workers=1 --instance_node_name=scheduler\n```\n\nYou can query the running scheduler via its REST API:\n\n```\ncurl -d '{\"a\":{\"handler\":\"jobs\"},\"b\":{\"handler\":\"running_tasks\"}}' :::6790\ncurl -d '{\"my subquery\":{\"handler\":\"task_logs\",\"log_type\":\"stdout\"}}' :::6790\n```\n\n**Pro-tip:** For ease of reading, pipe the output through either `jq` or\n`json_pp` (from a Perl package). For longer outputs, try `| jq -C . | less -R`.\n\nYou should also take a look at the scheduler configuration to see how its\njobs, nodes, and resources were specified.\n\n```\nless scripts/test_configs/simple\n```\n\nFor debugging, we typically invoke the binaries like this:\n\n```\ngdb cmake/Debug/worker/bistro_worker -ex \"r ...\" 2>&1 | tee WORKER.txt\n```\n\nWhen configuring a real deployment, be sure to carefully review the `--help`\nof the scheduler & worker binaries, as well as the documentation on\nhttp://facebook.github.io/bistro.  And don't hesitate to ask for help in the group:\nhttps://www.facebook.com/groups/bistro.scheduler\n\n", "confidence": [1], "technique": "wordnet"}], "codeRepository": {"excerpt": "https://github.com/facebook/bistro", "confidence": [1.0], "technique": "metadata"}, "owner": {"excerpt": "facebook", "confidence": [1.0], "technique": "metadata"}, "ownerType": {"excerpt": "Organization", "confidence": [1.0], "technique": "metadata"}, "dateCreated": {"excerpt": "2014-01-28T05:26:00Z", "confidence": [1.0], "technique": "metadata"}, "dateModified": {"excerpt": "2020-11-10T03:01:58Z", "confidence": [1.0], "technique": "metadata"}, "name": {"excerpt": "bistro", "confidence": [1.0], "technique": "metadata"}, "fullName": {"excerpt": "facebook/bistro", "confidence": [1.0], "technique": "metadata"}, "issueTracker": {"excerpt": "https://api.github.com/repos/facebook/bistro/issues{/number}", "confidence": [1.0], "technique": "metadata"}, "forks_url": {"excerpt": "https://api.github.com/repos/facebook/bistro/forks", "confidence": [1.0], "technique": "metadata"}, "stargazers_count": {"excerpt": {"count": 923, "date": "Tue, 10 Nov 2020 08:09:43 GMT"}, "confidence": [1.0], "technique": "metadata"}, "forks_count": {"excerpt": {"count": 124, "date": "Tue, 10 Nov 2020 08:09:43 GMT"}, "confidence": [1.0], "technique": "metadata"}, "downloadUrl": {"excerpt": "https://github.com/facebook/bistro/releases", "confidence": [1.0], "technique": "metadata"}, "topics": {"excerpt": [], "confidence": [1.0], "technique": "metadata"}, "languages": {"excerpt": ["C++", "Python", "PHP", "CMake", "Thrift", "Shell", "CSS", "JavaScript", "C", "Dockerfile"], "confidence": [1.0], "technique": "metadata"}, "readme_url": {"excerpt": "https://github.com/facebook/bistro/blob/master/README.md", "confidence": [1.0], "technique": "metadata"}, "releases": {"excerpt": [], "confidence": [1.0], "technique": "metadata"}}